PROGRAM CheckPosition NOHOLD
CONST
  ki_dv_tcp_connection = 29
  default_port = 12344
VAR
  vi_netlun : INTEGER
  vi_local_port : INTEGER
  resp : INTEGER
  p1 : POSITION
  s : STRING[80]
  j1 : JOINTPOS
BEGIN
  vi_netlun := 22
  OPEN FILE vi_netlun ('NETT:', 'rw')
  vi_local_port := default_port
  WRITE LUN_CRT ('-----------------------------------------------------------------', NL)
  WRITE LUN_CRT ('Waiting for connection on port ', vi_local_port, NL)
  WRITE LUN_CRT ('-----------------------------------------------------------------', NL)
connection::  
  DV4_CNTRL(ki_dv_tcp_connection, (vi_netlun), (vi_local_port))
read::  
  IF $DV_STS = 0 THEN
    WRITE LUN_CRT ('Client connected', NL)
    READ vi_netlun (resp)
    WRITE vi_netlun ('OK')
    WRITE LUN_CRT ('Read ', resp, NL)
    SELECT resp OF
      CASE (8):
        -- Returns the position in the operative space
        p1 := ARM_POS(1)
        READ vi_netlun (s)
        WRITE vi_netlun (p1.X, NL)
        WRITE LUN_CRT ('Sent: ', p1.X, NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (p1.Y, NL)
        WRITE LUN_CRT ('Sent: ', p1.Y, NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (p1.Z, NL)
        WRITE LUN_CRT ('Sent: ', p1.Z, NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (p1.A, NL)
        WRITE LUN_CRT ('Sent: ', p1.A, NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (p1.E, NL)
        WRITE LUN_CRT ('Sent: ', p1.E, NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (p1.R, NL)
        WRITE LUN_CRT ('Sent: ', p1.R, NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
      CASE (9):
        -- Returns the position of the joints
        j1 := ARM_JNTP(1)
        READ vi_netlun (s)
        WRITE vi_netlun (j1[1], NL)
        WRITE LUN_CRT ('Sent: ', j1[1], NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (j1[2], NL)
        WRITE LUN_CRT ('Sent: ', j1[2], NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (j1[3], NL)
        WRITE LUN_CRT ('Sent: ', j1[3], NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (j1[4], NL)
        WRITE LUN_CRT ('Sent: ', j1[4], NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (j1[5], NL)
        WRITE LUN_CRT ('Sent: ', j1[5], NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
        WRITE vi_netlun (j1[6], NL)
        WRITE LUN_CRT ('Sent: ', j1[6], NL)
        READ vi_netlun (s)
        WRITE LUN_CRT ('Read ', s, NL)
      CASE (99):
        -- Exit		
        GOTO end
    ENDSELECT
    GOTO read
  ENDIF
end::  
  WRITE vi_netlun ('END')
  WRITE LUN_CRT ('Exit')
  CLOSE FILE vi_netlun
END CheckPosition
